package UMCS.Games.Chess.EndGames;
import java.util.zip.*;
import java.io.*;

public class KTEndGame
{

   public KTEndGame() {
   }

  class Huff {
	RandomAccessFile f;
	long	indexlen;
	long	grouplen;
	long	nspec;
	long	indexmod;
	long[]	special;
	long[]	tree;
	long[]	ztree;
	long[]	index;
  };

  class Etab
  {
	int[]	p = new int[5];
	int	type;
	int	error;
	Huff	hp;
  };

  class Posn
  {
	char[]	bd = new char[64];
	short	epp;
	short	mvno;
	short[]	mv = new short[1];

        Posn( char[] cc) {
           bd = cc;  
           epp = 0; mvno = 0; mv[0]=0;
        }
  };

  class Dev {
	long	h;
	int	k1;
	int	k2;
	int	p1;
	int	p2;
	int	p3;
  };
  Dev dev;

  // "macro"
  private int GONE() { return dev.k1; }

  // constants
  static short 	MAXPLY	= 100,
 		MAXGEN	= 100,
 		BLACK	= 8,
   		INIT	= 16,

		WPAWN	= 1,
		WKNIGHT = 2,
		WBISHOP = 3,
		WROOK	= 4,
		WQUEEN	= 5,
		WKING	= 6,
		BPAWN	= 9,
		BKNIGHT = 10,
		BBISHOP	= 11,
		BROOK	= 12,
		BQUEEN	= 13,
		BKING	= 14,

		TMARK	= 0,
		TNORM	= 1,
		TEPENAB	= 2,
		TOOO	= 3,
		TOO	= 4,
		TNPRO	= 5,
		TBPRO	= 6,
		TRPRO	= 7,
		TQPRO	= 8,
		TENPAS	= 9,
		TNULL	= 10,

		U1	= 1<<0,
		U2	= 1<<1,
		L1	= 1<<2,
		L2	= 1<<3,
		D1	= 1<<4,
		D2	= 1<<5,
		R1	= 1<<6,
		R2	= 1<<7,

		ULEFT	= (short)(U1|L1),
		URIGHT	= (short)(U1|R1),
		DLEFT	= (short)(D1|L1),
		DRIGHT	= (short)(D1|R1),
		LEFT	= L1,
		RIGHT	= R1,
		UP	= U1,
		DOWN	= D1,
		U2R1	= (short)(U1|U2|R1),
		U1R2	= (short)(U1|R1|R2),
		D1R2	= (short)(D1|R1|R2),
		D2R1	= (short)(D1|D2|R1),
		D2L1	= (short)(D1|D2|L1),
		D1L2	= (short)(D1|L1|L2),
		U1L2	= (short)(U1|L1|L2),
		U2L1	= (short)(U1|U2|L1),
		RANK2	= D2,
		RANK7	= U2,

		INF	= 999,
		NONE	= 990,
	
		AMARK	= 040000,
		EPMARK	= 020000;
	
   static int   ENDFLAG = 0x800000;

  // data - initialized;

  short dir[] =   // was short!!!
  {
	(short)(U1|L1),(short)(U1|L2), U1   , U1   , U1   , U1   , (short)(U1|R2), (short)(U1|R1),
	(short)(U2|L1),(short)(U2|L2), U2   , U2   , U2   , U2   , (short)(U2|R2), (short)(U2|R1),
	   L1,    L2,     0,     0,     0,     0,    R2,    R1,
	   L1,    L2,     0,     0,     0,     0,    R2,    R1,
	   L1,    L2,     0,     0,     0,     0,    R2,    R1,
	   L1,    L2,     0,     0,     0,     0,    R2,    R1,
	(short)(D2|L1),(short)(D2|L2), D2   , D2   , D2   , D2   ,(short)(D2|R2),(short)(D2|R1),
	(short)(D1|L1),(short)(D1|L2), D1   , D1   , D1   , D1   ,(short)(D1|R2),(short)(D1|R1)
  };


  int attab[] =   // was short!
  {
	U2R1, -15,
	U1R2, -6,
	D1R2, 10,
	D2R1, 17,
	D2L1, 15,
	D1L2, 6,
	U1L2, -10,
	U2L1, -17,

	ULEFT, -9,
	URIGHT, -7,
	DLEFT, 7,
	DRIGHT, 9,

	UP, -8,
	LEFT, -1,
	RIGHT, 1,
	DOWN, 8,
  };

  char[] opening =   {
	(char)(INIT+BROOK),
	(char)(INIT+BKNIGHT),
	(char)(INIT+BBISHOP),
	(char)(INIT+BQUEEN),
	(char)(INIT+BKING),
	(char)(INIT+BBISHOP),
	(char)(INIT+BKNIGHT),
	(char)(INIT+BROOK),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	(char)(INIT+BPAWN),
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WPAWN),
	(char)(INIT+WROOK),
	(char)(INIT+WKNIGHT),
	(char)(INIT+WBISHOP),
	(char)(INIT+WQUEEN),
	(char)(INIT+WKING),
	(char)(INIT+WBISHOP),
	(char)(INIT+WKNIGHT),
	(char)(INIT+WROOK)};

  Posn initp = new Posn(opening);

  short	color[] =
  {
	 0,
	 1,  1,  1,  1,  1,  1,  1,
	 0,
	-1, -1, -1, -1, -1, -1, -1,
	 0,
	 1,  1,  1,  1,  1,  1,  1,
	 0,
	-1, -1, -1, -1, -1, -1, -1,
  };

  short	ket[][] = // was char
  {
  /*
   * white, white, black
   */

   {	WQUEEN,		WQUEEN,		BQUEEN,		2},
   {	WQUEEN,		WROOK,		BQUEEN,		2},
   {	WQUEEN,		WROOK,		BROOK,		2},
   {	WQUEEN,		BROOK,		BROOK,		2},
   {	WQUEEN,		WBISHOP,	BQUEEN,		2},
   {	WQUEEN,		WKNIGHT,	BKNIGHT,	2},
   {	WQUEEN,		WKNIGHT,	BQUEEN,		2},
   {	WROOK,		WROOK,		BROOK,		2},
   {	WROOK,		WBISHOP,	BROOK,		2},
   {	WROOK,		WKNIGHT,	BKNIGHT,	2},
   {	WROOK,		WKNIGHT,	BROOK,		2},
   {	WBISHOP,	WBISHOP,	BKNIGHT,	2},
   {	WBISHOP,	WKNIGHT,	BKNIGHT,	2},
   {	WKNIGHT,	WKNIGHT,	BKNIGHT,	2},
   /*
    * white, black, black
    */

   {	WQUEEN,		BROOK,		BBISHOP,	2},
   {	WQUEEN,		BROOK,		BKNIGHT,	2},
   {	WQUEEN,		BBISHOP,	BBISHOP,	2},
   {	WQUEEN,		BBISHOP,	BKNIGHT,	2},
   {	WQUEEN,		BKNIGHT,	BKNIGHT,	2},

   /*
    * a pawn
    */

   {	WPAWN,		WQUEEN,		BQUEEN,		4},
   {	WPAWN,		WROOK,		BROOK,		4},
   {	WPAWN,		WKNIGHT,	BKNIGHT,	4},

   {	0,0,0,0 },
   };


  short	itab[] =
  {
	  462,  462,    0,    1,    2,    3,    4,    5,
	  462,  462,    6,    7,    8,    9,   10,   11,
	  462,  462,   12,   13,   14,   15,   16,   17,
	  462,  462,  462,   18,   19,   20,   21,   22,
	  462,  462,  462,  462,   23,   24,   25,   26,
	  462,  462,  462,  462,  462,   27,   28,   29,
	  462,  462,  462,  462,  462,  462,   30,   31,
	  462,  462,  462,  462,  462,  462,  462,   32,
	  462,  462,  462,   33,   34,   35,   36,   37,
	  462,  462,  462,   38,   39,   40,   41,   42,
	   43,   44,   45,   46,   47,   48,   49,   50,
	   51,   52,   53,   54,   55,   56,   57,   58,
	   59,   60,   61,   62,   63,   64,   65,   66,
	   67,   68,   69,   70,   71,   72,   73,   74,
	   75,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,
	   91,  462,  462,  462,   92,   93,   94,   95,
	   96,  462,  462,  462,   97,   98,   99,  100,
	  101,  102,  103,  104,  105,  106,  107,  108,
	  109,  110,  111,  112,  113,  114,  115,  116,
	  117,  118,  119,  120,  121,  122,  123,  124,
	  125,  126,  127,  128,  129,  130,  131,  132,
	  133,  134,  135,  136,  137,  138,  139,  140,
	  141,  142,  143,  144,  145,  146,  147,  148,
	  149,  150,  462,  462,  462,  151,  152,  153,
	  154,  155,  462,  462,  462,  156,  157,  158,
	  159,  160,  161,  162,  163,  164,  165,  166,
	  167,  168,  169,  170,  171,  172,  173,  174,
	  175,  176,  177,  178,  179,  180,  181,  182,
	  183,  184,  185,  186,  187,  188,  189,  190,
	  191,  192,  193,  194,  195,  196,  197,  198,
	  199,  200,  201,  202,  203,  204,  205,  206,
	  462,  462,  462,  207,  208,  209,  210,  211,
	  462,  462,  462,  212,  213,  214,  215,  216,
	  462,  462,  462,  217,  218,  219,  220,  221,
	  462,  462,  462,  222,  223,  224,  225,  226,
	  462,  462,  462,  462,  227,  228,  229,  230,
	  462,  462,  462,  462,  462,  231,  232,  233,
	  462,  462,  462,  462,  462,  462,  234,  235,
	  462,  462,  462,  462,  462,  462,  462,  236,
	  237,  462,  462,  462,  238,  239,  240,  241,
	  242,  462,  462,  462,  243,  244,  245,  246,
	  247,  462,  462,  462,  248,  249,  250,  251,
	  252,  253,  254,  255,  256,  257,  258,  259,
	  260,  261,  262,  263,  264,  265,  266,  267,
	  268,  269,  270,  271,  272,  273,  274,  275,
	  276,  277,  278,  279,  280,  281,  282,  283,
	  284,  285,  286,  287,  288,  289,  290,  291,
	  292,  293,  462,  462,  462,  294,  295,  296,
	  297,  298,  462,  462,  462,  299,  300,  301,
	  302,  303,  462,  462,  462,  304,  305,  306,
	  307,  308,  309,  310,  311,  312,  313,  314,
	  315,  316,  317,  318,  319,  320,  321,  322,
	  323,  324,  325,  326,  327,  328,  329,  330,
	  331,  332,  333,  334,  335,  336,  337,  338,
	  339,  340,  341,  342,  343,  344,  345,  346,
	  347,  348,  349,  350,  351,  352,  353,  354,
	  462,  462,  462,  462,  355,  356,  357,  358,
	  462,  462,  462,  462,  359,  360,  361,  362,
	  462,  462,  462,  462,  363,  364,  365,  366,
	  462,  462,  462,  462,  367,  368,  369,  370,
	  462,  462,  462,  462,  462,  371,  372,  373,
	  462,  462,  462,  462,  462,  462,  374,  375,
	  462,  462,  462,  462,  462,  462,  462,  376,
	  377,  378,  379,  380,  381,  382,  383,  384,
	  385,  386,  462,  462,  462,  387,  388,  389,
	  390,  391,  462,  462,  462,  392,  393,  394,
	  395,  396,  462,  462,  462,  397,  398,  399,
	  400,  401,  402,  403,  404,  405,  406,  407,
	  408,  409,  410,  411,  412,  413,  414,  415,
	  416,  417,  418,  419,  420,  421,  422,  423,
	  424,  425,  426,  427,  428,  429,  430,  431,
	  432,  433,  434,  435,  436,  437,  438,  439,
	  462,  440,  441,  442,  443,  444,  445,  446,
	  462,  462,  462,  462,  462,  447,  448,  449,
	  462,  462,  462,  462,  462,  450,  451,  452,
	  462,  462,  462,  462,  462,  453,  454,  455,
	  462,  462,  462,  462,  462,  456,  457,  458,
	  462,  462,  462,  462,  462,  462,  459,  460,
	  462,  462,  462,  462,  462,  462,  462,  461,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
	  462,  462,  462,  462,  462,  462,  462,  462,
   };
   short gtab[] =
   {
	0000,0001,0002,0003,0004,0005,0006,0007,
	0010,0011,0012,0013,0014,0015,0016,0017,
	0020,0021,0022,0023,0024,0025,0026,0027,
	0030,0031,0032,0033,0034,0035,0036,0037,
	0040,0041,0042,0043,0044,0045,0046,0047,
	0050,0051,0052,0053,0054,0055,0056,0057,
	0060,0061,0062,0063,0064,0065,0066,0067,
	0070,0071,0072,0073,0074,0075,0076,0077,
	0100,0001,0002,0003,0004,0005,0006,0007,
	0201,0111,0012,0013,0014,0015,0016,0017,
	0202,0212,0122,0023,0024,0025,0026,0027,
	0203,0213,0223,0133,0034,0035,0036,0037,
	0204,0214,0224,0234,0144,0045,0046,0047,
	0205,0215,0225,0235,0245,0155,0056,0057,
	0206,0216,0226,0236,0246,0256,0166,0067,
	0207,0217,0227,0237,0247,0257,0267,0177,
	0200,0210,0220,0230,0240,0250,0260,0270,
	0201,0211,0221,0231,0241,0251,0261,0271,
	0202,0212,0222,0232,0242,0252,0262,0272,
	0203,0213,0223,0233,0243,0253,0263,0273,
	0204,0214,0224,0234,0244,0254,0264,0274,
	0205,0215,0225,0235,0245,0255,0265,0275,
	0206,0216,0226,0236,0246,0256,0266,0276,
	0207,0217,0227,0237,0247,0257,0267,0277,
	0300,0210,0220,0230,0240,0250,0260,0270,
	0201,0311,0221,0231,0241,0251,0261,0271,
	0202,0212,0322,0232,0242,0252,0262,0272,
	0203,0213,0223,0333,0243,0253,0263,0273,
	0204,0214,0224,0234,0344,0254,0264,0274,
	0205,0215,0225,0235,0245,0355,0265,0275,
	0206,0216,0226,0236,0246,0256,0366,0276,
	0207,0217,0227,0237,0247,0257,0267,0377,
	0007,0006,0005,0004,0003,0002,0001,0000,
	0017,0016,0015,0014,0013,0012,0011,0010,
	0027,0026,0025,0024,0023,0022,0021,0020,
	0037,0036,0035,0034,0033,0032,0031,0030,
	0047,0046,0045,0044,0043,0042,0041,0040,
	0057,0056,0055,0054,0053,0052,0051,0050,
	0067,0066,0065,0064,0063,0062,0061,0060,
	0077,0076,0075,0074,0073,0072,0071,0070,
	0007,0006,0005,0004,0003,0002,0001,0100,
	0017,0016,0015,0014,0013,0012,0111,0201,
	0027,0026,0025,0024,0023,0122,0212,0202,
	0037,0036,0035,0034,0133,0223,0213,0203,
	0047,0046,0045,0144,0234,0224,0214,0204,
	0057,0056,0155,0245,0235,0225,0215,0205,
	0067,0166,0256,0246,0236,0226,0216,0206,
	0177,0267,0257,0247,0237,0227,0217,0207,
	0270,0260,0250,0240,0230,0220,0210,0200,
	0271,0261,0251,0241,0231,0221,0211,0201,
	0272,0262,0252,0242,0232,0222,0212,0202,
	0273,0263,0253,0243,0233,0223,0213,0203,
	0274,0264,0254,0244,0234,0224,0214,0204,
	0275,0265,0255,0245,0235,0225,0215,0205,
	0276,0266,0256,0246,0236,0226,0216,0206,
	0277,0267,0257,0247,0237,0227,0217,0207,
	0270,0260,0250,0240,0230,0220,0210,0300,
	0271,0261,0251,0241,0231,0221,0311,0201,
	0272,0262,0252,0242,0232,0322,0212,0202,
	0273,0263,0253,0243,0333,0223,0213,0203,
	0274,0264,0254,0344,0234,0224,0214,0204,
	0275,0265,0355,0245,0235,0225,0215,0205,
	0276,0366,0256,0246,0236,0226,0216,0206,
	0377,0267,0257,0247,0237,0227,0217,0207,
	0070,0071,0072,0073,0074,0075,0076,0077,
	0060,0061,0062,0063,0064,0065,0066,0067,
	0050,0051,0052,0053,0054,0055,0056,0057,
	0040,0041,0042,0043,0044,0045,0046,0047,
	0030,0031,0032,0033,0034,0035,0036,0037,
	0020,0021,0022,0023,0024,0025,0026,0027,
	0010,0011,0012,0013,0014,0015,0016,0017,
	0000,0001,0002,0003,0004,0005,0006,0007,
	0207,0217,0227,0237,0247,0257,0267,0177,
	0206,0216,0226,0236,0246,0256,0166,0067,
	0205,0215,0225,0235,0245,0155,0056,0057,
	0204,0214,0224,0234,0144,0045,0046,0047,
	0203,0213,0223,0133,0034,0035,0036,0037,
	0202,0212,0122,0023,0024,0025,0026,0027,
	0201,0111,0012,0013,0014,0015,0016,0017,
	0100,0001,0002,0003,0004,0005,0006,0007,
	0207,0217,0227,0237,0247,0257,0267,0277,
	0206,0216,0226,0236,0246,0256,0266,0276,
	0205,0215,0225,0235,0245,0255,0265,0275,
	0204,0214,0224,0234,0244,0254,0264,0274,
	0203,0213,0223,0233,0243,0253,0263,0273,
	0202,0212,0222,0232,0242,0252,0262,0272,
	0201,0211,0221,0231,0241,0251,0261,0271,
	0200,0210,0220,0230,0240,0250,0260,0270,
	0207,0217,0227,0237,0247,0257,0267,0377,
	0206,0216,0226,0236,0246,0256,0366,0276,
	0205,0215,0225,0235,0245,0355,0265,0275,
	0204,0214,0224,0234,0344,0254,0264,0274,
	0203,0213,0223,0333,0243,0253,0263,0273,
	0202,0212,0322,0232,0242,0252,0262,0272,
	0201,0311,0221,0231,0241,0251,0261,0271,
	0300,0210,0220,0230,0240,0250,0260,0270,
	0077,0076,0075,0074,0073,0072,0071,0070,
	0067,0066,0065,0064,0063,0062,0061,0060,
	0057,0056,0055,0054,0053,0052,0051,0050,
	0047,0046,0045,0044,0043,0042,0041,0040,
	0037,0036,0035,0034,0033,0032,0031,0030,
	0027,0026,0025,0024,0023,0022,0021,0020,
	0017,0016,0015,0014,0013,0012,0011,0010,
	0007,0006,0005,0004,0003,0002,0001,0000,
	0177,0267,0257,0247,0237,0227,0217,0207,
	0067,0166,0256,0246,0236,0226,0216,0206,
	0057,0056,0155,0245,0235,0225,0215,0205,
	0047,0046,0045,0144,0234,0224,0214,0204,
	0037,0036,0035,0034,0133,0223,0213,0203,
	0027,0026,0025,0024,0023,0122,0212,0202,
	0017,0016,0015,0014,0013,0012,0111,0201,
	0007,0006,0005,0004,0003,0002,0001,0100,
	0277,0267,0257,0247,0237,0227,0217,0207,
	0276,0266,0256,0246,0236,0226,0216,0206,
	0275,0265,0255,0245,0235,0225,0215,0205,
	0274,0264,0254,0244,0234,0224,0214,0204,
	0273,0263,0253,0243,0233,0223,0213,0203,
	0272,0262,0252,0242,0232,0222,0212,0202,
	0271,0261,0251,0241,0231,0221,0211,0201,
	0270,0260,0250,0240,0230,0220,0210,0200,
	0377,0267,0257,0247,0237,0227,0217,0207,
	0276,0366,0256,0246,0236,0226,0216,0206,
	0275,0265,0355,0245,0235,0225,0215,0205,
	0274,0264,0254,0344,0234,0224,0214,0204,
	0273,0263,0253,0243,0333,0223,0213,0203,
	0272,0262,0252,0242,0232,0322,0212,0202,
	0271,0261,0251,0241,0231,0221,0311,0201,
	0270,0260,0250,0240,0230,0220,0210,0300,
  };
  short	htab[] =
  {
	0100,0001,0002,0003,0023,0022,0021,0120,
	0201,0104,0005,0006,0026,0025,0124,0221,
	0202,0205,0107,0010,0030,0127,0225,0222,
	0203,0206,0210,0111,0131,0230,0226,0223,
	0243,0246,0250,0151,0171,0270,0266,0263,
	0242,0245,0147,0050,0070,0167,0265,0262,
	0241,0144,0045,0046,0066,0065,0164,0261,
	0140,0041,0042,0043,0063,0062,0061,0160,
  };
  char	prm5[] =
  {
	 7, 6, 5, 4, 3, 2, 1, 0,
	15,14,13,12,11,10, 9, 8,
	23,22,21,20,19,18,17,16,
	31,30,29,28,27,26,25,24,
	39,38,37,36,35,34,33,32,
	47,46,45,44,43,42,41,40,
	55,54,53,52,51,50,49,48,
	63,62,61,60,59,58,57,56,
  };

 

  /*
  * huffman decode routines
  */
   int unpackInt(RandomAccessFile f, int off) throws IOException {
     return f.readInt() + off;
   }
/*
   Huff huffinit(String filename) {
      Huff h = null;
      int j, k, off;

      try{ 
	RandomAccessFile f = new RandomAccessFile(filename,"r");

	h->fd = f;

	unpackin(f, &h->grouplen, 1, 0);

	unpackin(f, &h->nspec, 1, 0);
	h->special = malloc(sizeof(long)*h->nspec);
	unpackin(f, h->special, h->nspec, 0);

	unpackin(f, &k, 1, 0);
	h->tree = malloc(sizeof(long)*k);
	unpackin(f, h->tree, k, 0);

	unpackin(f, &j, 1, 0);
	h->ztree = malloc(sizeof(long)*j);
	unpackin(f, h->ztree, j, 0);

	unpackin(f, &h->indexmod, 1, 0);

	unpackin(f, &h->indexlen, 1, 0);
	h->index = malloc(sizeof(long)*h->indexlen);
	unpackin(f, h->index, h->indexlen,
		(h->indexlen + j + k + h->nspec + 6) * sizeof(long) * 8);


	return h;
	  } catch (FileNotFoundException e) {
	  	
      } catch (IOException e) {
     

      } catch (Exception e) {
      }
}
*/


}
